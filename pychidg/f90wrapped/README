The ChiDG project provides two methods for interfacing with the library.


Binary Executable
    A binary executable is generated compiling the driver.f90 file and linking with the ChiDG library.
    The driver.f90 file imports the main chidg_t container that acts as the primary interface to the library.
    Calls to chidg_t methods are then used to initialize the simulation environment, read data, set algorithms etc.
    It is also used to run the simulation.


Python Interface
    A python interface is generated so that the chidg_t container can be dynamically imported and used
    in a python script. It is used in a similar way as the Fortran driver script, but without the need
    to be recompiled if something in the python script changes.

    The method for creating the ChiDG interface is as follows:
        Use f90wrap to generate the wrappers for Fortran classes. This is because f2py doesn't handle Fortran classes
        so f90wrap is used to create wrappers that enable the class definitions.

            f90wrap -k kind_map -m chidg --move-methods *python.f90

        The --move-methods option is important here as it correctly associated Fortran type-bound procedures as 
        class methods in the Python module. The files *python.f90 are essentially copies of the files that we want
        to be exposed in the python interface but with the bodies of all functions/subroutines taken out and any
        type-bound procedure arguments with the keyword 'class' changed to 'type'. These files are generated by the 
        developer and committed to the project so they do not need to be regenerated by a user to build.



        At build time, f2py is called to actually compile the f90wrap-generated wrappers, build the python interface,
        and link to the ChiDG library.

            f2py -c -m _chidg f90wrap* -L. -lcoredg -lblas -lhdf5 -lhdf5_fortran -lhdf5_hl -lhdf5hl_fortran -llapack

        In the CMake build, this function is linked slightly differently due to differences in library paths.


    Once the interface is built, we are left with:
        chidg.py    < Generated by f90wrap and includes the Python-definition of the ChiDG classes. Also expects to read _chidg.so
        _chidg.so   < Generated by f2py and includes the wrapper routines and the libcoredg.a archive.







